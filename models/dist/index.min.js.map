{"version":3,"sources":["index.js"],"names":["sequelize","fs","require","path","basename","__filename","Sequelize","NODE_ENV","config","__dirname","env","use_env_variable","process","database","username","password","readdirSync","file","indexOf","slice","join","DataTypes","forEach","name","db","model","modelName","associate","Object","keys","Ideas","hasMany","IdeasBought","belongsTo","module","exports"],"mappings":"AAAA,aAEA,IAQIA,UARIC,GAAGC,QAAQ,MACbC,KAAOD,QAAQ,QAAfC,UAAcD,QAApB,aAEME,SAAWD,KAAKC,SAASC,YADzBC,IAAAA,QAAYJ,IAAQK,UAA1B,cAGMC,OAASN,QAAQO,UAAY,0BAA0BC,KAFvDN,GAAAA,GAOJJ,UALIQ,OAAMG,iBAKE,IAAIL,UAAUM,QAAQF,IAAIF,OAAOG,kBAAmBH,QAFlE,IAAAF,UAAAE,OAAAK,SAAAL,OAAAM,SAAAN,OAAAO,SAAAP,QAEER,GADFgB,YAEOP,WACLT,OAAAA,SAAAA,GACD,OAAA,IAAAiB,EAAAC,QAAA,MAAAD,IAAAb,UAAA,QAAAa,EAAAE,OAAA,KAGEH,QAAAA,SAAAA,GAEC,IAAQC,EAAKC,QAALf,KAAsBiB,KAAOH,UAASb,GAAjCc,CAANlB,UAA0DmB,UAALE,WAE7DC,GAAAA,EAAQC,MAAAN,IAEPO,OAAGC,KAAMF,IAATD,QAAA,SAAAI,GAPJF,GAAAE,GAAAC,WAUAC,GAAOC,GAASP,UAAQE,MAIvBA,GAJDxB,UAAAA,UAMAwB,GAAGxB,UAAYA,UAQfwB,GAAGM,MAAMC,QAAQP,GAAGQ,aACpBR,GAAGQ,YAAYC,UAAUT,GAAGM,OAI5BI,OAAOC,QAAUX","file":"index.min.js","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(__dirname + '/../config/config.json')[env];\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach(file => {\n    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\n//Association\n\n\n// db.IdeasBought.hasMany(db.Ideas,{as:\"ideas\",constraints:false,foreignKey:\"IdeasBoughtId\"});\n\ndb.Ideas.hasMany(db.IdeasBought);\ndb.IdeasBought.belongsTo(db.Ideas);\n\n\n\nmodule.exports = db;\n"]}