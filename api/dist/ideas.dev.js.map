{"version":3,"sources":["ideas.js"],"names":["router","require","Router","Ideas","IdeasBought","axios","LocalDateTime","mysql","db","createConnection","host","user","password","database","post","req","res","data","pitcherid","body","pitch","price","time","now","toString","create","json","message","sequelize","get","findAll","order","literal","listofideas","send","reverse","id","params","Id","substr","length","console","log","where","customerid","include","model","required","ideas","Pitches","forEach","b","index","arr","IdeaId","then","push","Idea","ideaid","module","exports"],"mappings":"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","sourcesContent":["const  router=require('express').Router();\r\nconst {Ideas}=require(\"../models\");\r\nconst {IdeasBought}=require(\"../models\");\r\nconst axios=require(\"axios\");\r\nvar LocalDateTime = require(\"@js-joda/core\").LocalDateTime;\r\nconst mysql=require('mysql2');\r\nconst db=mysql.createConnection({\r\n    host: 'localhost',\r\n    user:\"angerfist\",\r\n    password:\"9662@#$%&\",\r\n    database: 'bridge'\r\n\r\n\r\n});\r\n\r\n//create an idea \r\nrouter.post(\"/create\",async(req,res)=>{\r\n    // image:req.file.path;\r\n    const data= {\r\n        pitcherid:req.body.pitcherid,\r\n        pitch:req.body.pitch,\r\n        price:req.body.price,\r\n        time:LocalDateTime.now().toString()\r\n\r\n       };\r\n   const pitch= await Ideas.create(data);\r\n    res.json({pitch:pitch,message:'pitch created'});\r\n    \r\n});\r\n//getting all ideas on first page render\r\nconst sequelize=require(\"sequelize\");\r\nconst res = require('express/lib/response');\r\nrouter.get(\"/\",async (req,res)=>{\r\n  \r\n    const  listofideas= await Ideas.findAll({order:[[sequelize.literal(\"updatedAt\")]]});\r\n      if(listofideas==null){\r\n          res.json(\"no ideas have been added!\");\r\n      }\r\n      res.send(listofideas.reverse());\r\n   \r\n      \r\n  \r\n  });\r\n\r\n//get a specific idea bought\r\nrouter.get(\"/ideasbought/:id\",async (req,res)=>{\r\n    const id=req.params.id;\r\ntry{\r\n   const Id=id.substr(1,id.length);\r\n   console.log(Id);\r\n    const pitch=await IdeasBought.findAll({where:{customerid:Id}});\r\n    res.json(pitch);\r\n    console.log(pitch);\r\n}\r\ncatch(err){\r\n    console.log(`dont panick but it seems the the id was not submitted`);\r\n\r\n}\r\n    \r\n \r\n})\r\n//inner join for finding ideas bought by a customer\r\nrouter.get(\"/ideascustomer/:id\", async (req,res)=>{\r\n    const id=req.params.id;\r\n    const Id=id.substr(1,id.length);\r\n    // console.log(Id);\r\n//     var ideas;\r\n//     db.connect((err)=>{\r\n//         if(err) throw err;\r\n//         console.log(\"connected to db...\");\r\n        \r\n//     });\r\n    \r\n//     try{\r\n//     db.query(`select * from bridge.ideas left join bridge.ideasboughts on bridge.ideas.id=bridge.ideasboughts.ideaid where bridge.ideasboughts.customerid=\"${Id}\"`,(err,res)=>{\r\n//         if(err) throw err;\r\n//         console.log(res);\r\n\r\n        \r\n//     });\r\n// }catch(err){\r\n//     console.log(\"something went wrong\");\r\n    \r\n// }finally{\r\n//     db.close((err)=>{\r\n//     if(err){ throw err};\r\n    \r\n//    }); \r\n//    console.log(\"finished updating from db and safely exiting....\");\r\n// } \r\n// res.json(ideas);\r\n// console.log(ideas);\r\nconst ideas=await Ideas.findAll({include:[{model:IdeasBought,\r\nrequired:false}]});\r\nvar Pitches=[];\r\nideas.forEach((b,index,arr)=>{\r\n    axios.get(`http://localhost:3001/idea/ideas/:${b.IdeaId}`).then((res)=>{\r\n\r\n    Pitches.push(res.data);\r\n    })\r\n\r\n    })\r\n    res.json(Ideas);\r\nconsole.log(Ideas);\r\n})\r\n\r\n\r\n\r\n\r\n\r\n//get a specific idea from database\r\nrouter.get(\"/ideas/:id\",async (req,res)=>{\r\n    const id=req.params.id;\r\ntry{\r\n   const Id=id.substr(1,id.length);\r\n   console.log(Id);\r\n    const Idea=await Ideas.findAll({where:{id:Id}});\r\n    res.json(Idea);\r\n}\r\ncatch(err){\r\n    console.log(err);\r\n\r\n}\r\n    \r\n \r\n})\r\n\r\nrouter.post(\"/bought\",async(req,res)=>{\r\n    // image:req.file.path;\r\n    const data= {\r\n        IdeaId:req.body.ideaid,\r\n        \r\n        customerid:req.body.customerid,\r\n        time:LocalDateTime.now().toString()\r\n\r\n       };\r\n   const pitch= await IdeasBought.create(data);\r\n    res.json({pitch:pitch,message:'pitch created'});\r\n    \r\n});\r\nmodule.exports=router;"],"file":"ideas.dev.js"}