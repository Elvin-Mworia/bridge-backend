{"version":3,"sources":["auth.js"],"names":["express","require","router","Router","bcrypt","sign","Users","post","req","res","body","firstname","secondname","email","password","customer","price","plan","console","log","hash","then","findAll","where","json","newUser","lastname","create","user","message","err","findOne","undefined","send","correctPassword","compare","match","status","accessToken","username","id","module","exports"],"mappings":"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","sourcesContent":["const express=require('express');\r\nconst router=express.Router();\r\nconst bcrypt=require(\"bcrypt\");\r\nconst {sign}=require(\"jsonwebtoken\");\r\n//registering\r\nconst {Users}=require(\"../models\");\r\n\r\nrouter.post(\"/register\", async (req,res)=>{ \r\n    const {firstname,secondname,email,password,customer,price}=req.body;\r\n    var plan;\r\n    // console.log(price);\r\n    if(price===\"2\" && customer===\"investor\"){\r\n      plan=\"bronze\";\r\n      \r\n      console.log(plan);\r\n    }\r\n    else if(price===\"5\"  && customer===\"investor\"){\r\n      \r\n      plan=\"silver\";\r\n      console.log(plan);\r\n    }\r\n     else if (price===\"10\" && customer===\"investor\"){\r\n      plan=\"gold\";\r\n      console.log(plan);\r\n\r\n     }\r\n     else{\r\n         plan=null;\r\n     }\r\n\r\n    // const lastname=req.body.lastname;\r\n    \r\n    // const investor=req.body.investor;\r\n    // const entreprenuer=req.body.entreprenuer;\r\n    //     const email=req.body.email;\r\n    //    const password=req.body.password;\r\n    //     const firstname=req.body.firstname;\r\n        //  console.log(password);\r\n        //  console.log(email);\r\n        //  console.log(username);\r\n  \r\n  try{\r\n    bcrypt.hash(password,10).then(async (hash)=>{\r\n        try{\r\n      if( await Users.findAll({where:{email:email}})===\"true\"){\r\n          res.json(\"Another account was registered with the email\")\r\n      }else{\r\n        if(customer===\"investor\"){\r\n            const newUser={firstname:firstname,lastname:secondname,email:email,password:hash,customer:customer,plan:plan}\r\n            const user= await Users.create(newUser);\r\n            res.json({message:`Thank ${user.firstname} for registering`});\r\n        }else{\r\n            const newUser={firstname:firstname,lastname:secondname,email:email,password:hash,customer:customer}\r\n            console.log(newUser);\r\n            const user= await Users.create(newUser);\r\n            res.json({message:`Thank ${user.firstname} for registering`});\r\n\r\n        }\r\n      }\r\n        \r\n    } catch(err){\r\n        console.log(\"another account was registered with the email,use another email please!\");\r\n    }\r\n}\r\n            \r\n        );\r\n    \r\n   \r\n}\r\n  catch(err){\r\n      console.log(err);\r\n  }\r\n     \r\n  });\r\n  \r\n\r\n\r\n\r\n//logging in\r\nrouter.post(\"/login\",async (req,res)=>{\r\nconst {email,password}=req.body;\r\n\r\nconst user=await Users.findOne({where:{email:email}});\r\n\r\nconsole.log(user);\r\n\r\n    if(user==null || user==undefined){\r\n        res.send({message:\"Username or email was not found\"});\r\n    }\r\n   \r\n\r\n\r\nconst correctPassword=user.password;\r\n\r\n\r\n\r\nbcrypt.compare(password,correctPassword).then((match)=>{\r\n    try{\r\n    if(!match){res.send({message:\"Wrong email and password combination\",status:301});\r\nconsole.log(\"logging in failed,try again!\")\r\n}\r\n    const accessToken=sign({username:user.email,id:user.id},\"ec0d54fd-d72e-4a53-aa72-b8ceabd148af\");\r\n    \r\n    res.json({accessToken:accessToken,\r\n        message:\"Logged in successfully\",username:user.firstname,\r\n    status:\"200\",\r\ncustomer:user.customer,user:user});\r\n    console.log(accessToken);\r\n console.log(\"logged in successfully.\");\r\n    }\r\n    catch(err){\r\n        console.log(\"logging in failed,try again!\");\r\n    }\r\n})\r\n\r\n});\r\nmodule.exports=router;\r\n"],"file":"auth.dev.js"}