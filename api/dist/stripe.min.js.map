{"version":3,"sources":["stripe.js"],"names":["stripe","require","process","env","secretKey","router","post","req","res","_req$body","email","payment_method","price","plan","customer","subscription","status","client_secret","regeneratorRuntime","async","_context","prev","next","body","log","console","awrap","customers","create","invoice_settings","default_payment_method","sent","subscriptions","id","items","expand","stop","_req$body2","amount","paymentIntent","_context2","paymentIntents","currency","metadata","integration_check","json"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,SAARA,CAAkBC,QAAQC,IAAIC,WACvCC,OAAOJ,QAAQ,UAARA,CAAmB,UAEhCI,OAAOC,KAAK,OAAQ,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAb,EAFpBF,EAAAgB,KAAYb,EAEQD,EAFRC,MAACT,EAEOQ,EAFPR,eAAmBW,EAEZH,EAFYG,MAEhCP,QAAYmB,IAAAZ,GAKNC,EALc,MAAAD,EAKT,iCALS,MAAAA,EAGhBa,iCAIEA,iCAPcA,QAAAD,IAAAX,GAAAO,EAAAE,KAAA,EAAAJ,mBAAAQ,MAeT1B,OAAA2B,UAAAC,OAAL,CACAH,eAAQD,EAERd,MAAAA,EAKAmB,iBAAkB,CAvBJC,uBAAAnB,MAAA,KAAA,EAAA,OAedE,EAfcO,EAAAW,KAAAX,EAAAE,KAAA,EAAAJ,mBAAAQ,MAuBI1B,OAAAgC,cAAAJ,OAAA,CAH2Bd,SApB/BA,EAAAmB,GAgCdC,MAAO,CAAC,CAAEtB,MAAOC,IAhCHsB,OAAA,CAAA,oCAAA,KAAA,EAuBIpB,EAvBJK,EAAAW,KAAAf,EAAAD,EAAA,eAAA,eAAA,OA+BdD,EAAUA,EAD2C,eAC3CA,eAAAA,cACAF,EAAAA,KAAAA,CAAAA,cAAOC,EAAAA,OAAAA,IAhCH,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAgB,YA2ClB/B,OAAOC,KAAK,OAAQ,SAAOC,EAAKC,GAAZ,IAAA6B,EAAAC,EAAAC,EAAA,OAAArB,mBAAAC,MAAA,SAAAqB,GAAA,OAAA,OAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,KAAA,EAAA,OAAAe,EA3CF9B,EAAAgB,KA2CEc,EA3CF3B,MAAA4B,EA2CED,EA3CFC,OA2CEE,EAAAlB,KAAA,EAAAJ,mBAAAQ,MAPU1B,OAAAyC,eAAkBb,OAAA,CACxCX,OAAAA,EAEIyB,SAAA,MAADC,SAAT,CAAAC,kBAAA,uBAIkB,KAAA,EAPZ5B,EAOYwB,EAAAT,KA3CFvB,EAAAqC,KAAA,CAAA5B,cAAAsB,EAAA,gBAAAd,QAAAD,IAAAhB,GA2CE,KAAA,EAAA,IAAA,MAAA,OAAAgC,EAAAJ,YAApB/B,OAAOC,QAAKD","file":"stripe.min.js","sourcesContent":["const stripe = require('stripe')(process.env.secretKey);\r\nconst router=require(\"express\")(\"Router\");\r\n\r\nrouter.post('/sub', async (req, res) => {\r\n    const {email, payment_method,price} = req.body;\r\n    var plan;\r\n    console.log(price);\r\n    if(price===\"2\"){\r\n      plan=\"price_1KQV3qIT6p7sbPTq9dyf157P\";\r\n      \r\n      console.log(plan);\r\n    }\r\n    else if(price===\"5\"){\r\n      \r\n      plan=\"price_1KQV5gIT6p7sbPTqlPwbvbyY\";\r\n      console.log(plan);\r\n    }\r\n     else{\r\n      plan=\"price_1KQV6DIT6p7sbPTqWUQmN8NP\";\r\n      console.log(plan);\r\n\r\n     }\r\n  \r\n    const customer = await stripe.customers.create({\r\n      payment_method: payment_method,\r\n      email: email,\r\n      invoice_settings: {\r\n        default_payment_method: payment_method,\r\n      \r\n        \r\n      },\r\n    });\r\n  \r\n    const subscription = await stripe.subscriptions.create({\r\n      customer: customer.id,\r\n      items: [{ price: plan}],\r\n      expand: ['latest_invoice.payment_intent']\r\n    });\r\n    \r\n    const status = subscription['latest_invoice']['payment_intent']['status'] \r\n    const client_secret = subscription['latest_invoice']['payment_intent']['client_secret']\r\n  \r\n    res.json({'client_secret': client_secret, 'status': status});\r\n  })\r\n  \r\n//payment of ideas\r\n  router.post('/pay', async (req, res) => {\r\n    const {email,amount} = req.body;\r\n    \r\n    const paymentIntent = await stripe.paymentIntents.create({\r\n        amount: amount,\r\n       \r\n        currency: 'usd',\r\n        // Verify your integration in this guide by including this parameter\r\n        metadata: {integration_check: 'accept_a_payment'},\r\n      });\r\n\r\n      res.json({'client_secret': paymentIntent['client_secret']})\r\n      console.log(res);\r\n})\r\n\r\n\r\n\r\n\r\n  module.exports=router;\r\n"]}