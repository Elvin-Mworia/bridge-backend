{"version":3,"sources":["ideas.js"],"names":["router","require","Router","Ideas","axios","LocalDateTime","db","mysql","createConnection","host","IdeasBought","password","post","res","data","req","body","pitcherid","database","pitch","price","time","now","toString","create","json","message","findAll","sequelize","literal","send","listofideas","reverse","get","id","Id","regeneratorRuntime","async","_context3","prev","next","params","substr","length","console","log","awrap","where","customerid","sent","t0","stop","ideas","Pitches","_context4","include","model","required","index","concat","b","IdeaId","then","Idea","_context5","_context6","ideaid","module","exports"],"mappings":"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","file":"ideas.min.js","sourcesContent":["const  router=require('express').Router();\r\nconst {Ideas}=require(\"../models\");\r\nconst {IdeasBought}=require(\"../models\");\r\nconst axios=require(\"axios\");\r\nvar LocalDateTime = require(\"@js-joda/core\").LocalDateTime;\r\nconst mysql=require('mysql2');\r\nconst db=mysql.createConnection({\r\n    host: 'localhost',\r\n    user:\"angerfist\",\r\n    password:\"9662@#$%&\",\r\n    database: 'bridge'\r\n\r\n\r\n});\r\n\r\n//create an idea \r\nrouter.post(\"/create\",async(req,res)=>{\r\n    // image:req.file.path;\r\n    const data= {\r\n        pitcherid:req.body.pitcherid,\r\n        pitch:req.body.pitch,\r\n        price:req.body.price,\r\n        time:LocalDateTime.now().toString()\r\n\r\n       };\r\n   const pitch= await Ideas.create(data);\r\n    res.json({pitch:pitch,message:'pitch created'});\r\n    \r\n});\r\n//getting all ideas on first page render\r\nconst sequelize=require(\"sequelize\");\r\nconst res = require('express/lib/response');\r\nrouter.get(\"/\",async (req,res)=>{\r\n  \r\n    const  listofideas= await Ideas.findAll({order:[[sequelize.literal(\"updatedAt\")]]});\r\n      if(listofideas==null){\r\n          res.json(\"no ideas have been added!\");\r\n      }\r\n      res.send(listofideas.reverse());\r\n   \r\n      \r\n  \r\n  });\r\n\r\n//get a specific idea bought\r\nrouter.get(\"/ideasbought/:id\",async (req,res)=>{\r\n    const id=req.params.id;\r\ntry{\r\n   const Id=id.substr(1,id.length);\r\n   console.log(Id);\r\n    const pitch=await IdeasBought.findAll({where:{customerid:Id}});\r\n    res.json(pitch);\r\n    console.log(pitch);\r\n}\r\ncatch(err){\r\n    console.log(`dont panick but it seems the the id was not submitted`);\r\n\r\n}\r\n    \r\n \r\n})\r\n//inner join for finding ideas bought by a customer\r\nrouter.get(\"/ideascustomer/:id\", async (req,res)=>{\r\n    const id=req.params.id;\r\n    const Id=id.substr(1,id.length);\r\n    // console.log(Id);\r\n//     var ideas;\r\n//     db.connect((err)=>{\r\n//         if(err) throw err;\r\n//         console.log(\"connected to db...\");\r\n        \r\n//     });\r\n    \r\n//     try{\r\n//     db.query(`select * from bridge.ideas left join bridge.ideasboughts on bridge.ideas.id=bridge.ideasboughts.ideaid where bridge.ideasboughts.customerid=\"${Id}\"`,(err,res)=>{\r\n//         if(err) throw err;\r\n//         console.log(res);\r\n\r\n        \r\n//     });\r\n// }catch(err){\r\n//     console.log(\"something went wrong\");\r\n    \r\n// }finally{\r\n//     db.close((err)=>{\r\n//     if(err){ throw err};\r\n    \r\n//    }); \r\n//    console.log(\"finished updating from db and safely exiting....\");\r\n// } \r\n// res.json(ideas);\r\n// console.log(ideas);\r\nconst ideas=await Ideas.findAll({include:[{model:IdeasBought,\r\nrequired:false}]});\r\nvar Pitches=[];\r\nideas.forEach((b,index,arr)=>{\r\n    axios.get(`http://localhost:3001/idea/ideas/:${b.IdeaId}`).then((res)=>{\r\n\r\n    Pitches.push(res.data);\r\n    })\r\n\r\n    })\r\n    res.json(Ideas);\r\nconsole.log(Ideas);\r\n})\r\n\r\n\r\n\r\n\r\n\r\n//get a specific idea from database\r\nrouter.get(\"/ideas/:id\",async (req,res)=>{\r\n    const id=req.params.id;\r\ntry{\r\n   const Id=id.substr(1,id.length);\r\n   console.log(Id);\r\n    const Idea=await Ideas.findAll({where:{id:Id}});\r\n    res.json(Idea);\r\n}\r\ncatch(err){\r\n    console.log(err);\r\n\r\n}\r\n    \r\n \r\n})\r\n\r\nrouter.post(\"/bought\",async(req,res)=>{\r\n    // image:req.file.path;\r\n    const data= {\r\n        IdeaId:req.body.ideaid,\r\n        \r\n        customerid:req.body.customerid,\r\n        time:LocalDateTime.now().toString()\r\n\r\n       };\r\n   const pitch= await IdeasBought.create(data);\r\n    res.json({pitch:pitch,message:'pitch created'});\r\n    \r\n});\r\nmodule.exports=router;"]}