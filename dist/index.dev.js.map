{"version":3,"sources":["index.js"],"names":["express","require","config","app","cors","db","Auth","Pitch","Bio","Idea","User","Stripe","logger","req","res","next","console","log","corOption","origin","use","json","urlencoded","extended","port","sequelize","sync","logging","force","then","listen","err"],"mappings":";;AAAA,IAAMA,OAAO,GAACC,OAAO,CAAC,SAAD,CAArB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,IAAMC,GAAG,GAACH,OAAO,EAAjB;;AACA,IAAMI,IAAI,GAACH,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAMI,EAAE,GAACJ,OAAO,CAAC,UAAD,CAAhB,C,CAEA;;;AACA,IAAMK,IAAI,GAACL,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAMM,KAAK,GAACN,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAMO,GAAG,GAACP,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAMQ,IAAI,GAACR,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAMS,IAAI,GAACT,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAMU,MAAM,GAACV,OAAO,CAAC,cAAD,CAApB,C,CAKA;;;AACA,IAAMW,MAAM,GAAC,SAAPA,MAAO,CAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAF,EAAAA,IAAI;AACN,CAHF,C,CAKC;;;AACA,IAAIG,SAAS,GAAC;AACXC,EAAAA,MAAM,EAAC;AADI,CAAd,C,CAID;;AACAhB,GAAG,CAACiB,GAAJ,CAAQhB,IAAI,CAACc,SAAD,CAAZ;AAEAf,GAAG,CAACiB,GAAJ,CAAQpB,OAAO,CAACqB,IAAR,EAAR;AACAlB,GAAG,CAACiB,GAAJ,CAAQpB,OAAO,CAACsB,UAAR,CAAmB;AAACC,EAAAA,QAAQ,EAAC;AAAV,CAAnB,CAAR;AAEApB,GAAG,CAACiB,GAAJ,CAAQR,MAAR,E,CACA;;AACAT,GAAG,CAACiB,GAAJ,CAAQ,UAAR,EAAmBpB,OAAO,UAAP,CAAe,UAAf,CAAnB,E,CAEA;;AACAG,GAAG,CAACiB,GAAJ,CAAQ,OAAR,EAAgBd,IAAhB;AACAH,GAAG,CAACiB,GAAJ,CAAQ,QAAR,EAAiBb,KAAjB;AACAJ,GAAG,CAACiB,GAAJ,CAAQ,MAAR,EAAeZ,GAAf;AACAL,GAAG,CAACiB,GAAJ,CAAQ,OAAR,EAAgBX,IAAhB;AACAN,GAAG,CAACiB,GAAJ,CAAQ,OAAR,EAAgBV,IAAhB;AACAP,GAAG,CAACiB,GAAJ,CAAQ,SAAR,EAAkBT,MAAlB;AAIA,IAAMa,IAAI,GAAC,IAAX,C,CACA;;AAEAnB,EAAE,CAACoB,SAAH,CAAaC,IAAb,CAAkB;AAACC,EAAAA,OAAO,EAACX,OAAO,CAACC,GAAjB;AAAqBW,EAAAA,KAAK,EAAC;AAA3B,CAAlB,EAAqDC,IAArD,CAA0D,YAAI;AAE1Db,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AAEAd,EAAAA,GAAG,CAAC2B,MAAJ,CAAWN,IAAX,EAAgB,YAAI;AAChBR,IAAAA,OAAO,CAACC,GAAR,2BAA+BO,IAA/B;AACP,GAFG;AAMH,CAVD,WAUS,UAAAO,GAAG;AAAA,SAAGf,OAAO,CAACC,GAAR,gCAAoCc,GAApC,EAAH;AAAA,CAVZ","sourcesContent":["const express=require('express');\r\nrequire(\"dotenv\").config();\r\nconst app=express();\r\nconst cors=require('cors');\r\nconst db=require(\"./models\");\r\n\r\n//controllers\r\nconst Auth=require(\"./api/auth\");\r\nconst Pitch=require(\"./api/pitch\");\r\nconst Bio=require(\"./api/bio\");\r\nconst Idea=require(\"./api/ideas\");\r\nconst User=require(\"./api/user\");\r\nconst Stripe=require(\"./api/stripe\");\r\n\r\n\r\n\r\n\r\n//middleware for logging out if an incoming request\r\nconst logger=(req,res,next)=>{\r\n    console.log(\"incoming request\");\r\n    next();\r\n }\r\n\r\n //allowed origin which the server can accept request from\r\n var corOption={\r\n    origin:\"*\"\r\n}\r\n\r\n//setting up cors\r\napp.use(cors(corOption));\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended:true}));\r\n  \r\napp.use(logger);\r\n//static files ie profile pictures\r\napp.use(\"./images\",express.static(\"./images\"));\r\n\r\n//routes\r\napp.use(\"/auth\",Auth);\r\napp.use(\"/pitch\",Pitch);\r\napp.use(\"/bio\",Bio);\r\napp.use(\"/idea\",Idea);\r\napp.use(\"/user\",User);\r\napp.use(\"/stripe\",Stripe);\r\n\r\n\r\n\r\nconst port=3001;\r\n//attempting to connect to the database first before starting the server\r\n\r\ndb.sequelize.sync({logging:console.log,force:false}).then(()=>{\r\n    \r\n    console.log(\"Connection to the database established\");\r\n    \r\n    app.listen(port,()=>{\r\n        console.log(`running on port ${port}`);\r\n});\r\n\r\n\r\n\r\n}).catch(err=>(console.log(`Something went wrong ${err}`)));"],"file":"index.dev.js"}